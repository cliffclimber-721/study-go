package vars

import "fmt"

func pointers() {
	a := 2
	b := a
	a = 20240205
	fmt.Println(a, b)
	// 이렇게 되면 결과값이 20240205 2 가 나온다.
	// a에 먼저 2를 선언하고 b의 값은 a를 통해 대입한다고 적혀있는데 아래의 값이 변해도 이미 b는 2라는 값을 받았기 때문에
	// 값이 더 변하거나 하는 일은 없다. 이미 선언된 숫자가 b의 값이 되는 것이다.
	c := 4
	d := 5
	fmt.Println(&c, &d)
	// 0x14000014100 0x14000014108 => 메모리 주소가 보인다.
	// 실제로 메모리 주소값을 보면 14100, 14108이 된 걸 볼 수 있다.
	// f := e를 예시로 들면, f의 값이 e의 메모리 주소값에 접근하고 싶다면 아래와 같이 작성하면 같은 주소값이 뜬다.
	e := 7
	f := &e
	*f = 20
	fmt.Println(&e, f)
	// 0x14000014110 0x14000014110 가 결과값이다.
	fmt.Println(e, *f)
	// 20 20 이 결과값으로 출력되는 이유는
	// *f를 20으로 줬는데 이건 f가 e에 대한 포인터이기 때문이다.
	// 같은 메모리 주소값을 나타내기 때문에 20이 된 f는 e에도 영향준다.
	// &는 주소값을 나타내고, 포인터는 주소를 살펴보면서 해당 주소에 담긴 값을 볼 수 있는 것이다.
}
